const contractAddress = "0x07f2dda4f4ce04e56308f1165e30c53430bdbe62";
const redirectUrl = "https://saiudja.space/plants-activation-25.html";

// ABI –¥–ª—è –≤–∏–∫–ª–∏–∫—É balanceOfBatch (ERC-1155)
const abi = [
  "function balanceOfBatch(address[] accounts, uint256[] ids) view returns (uint256[])",
];

document.getElementById("connectWallet").addEventListener("click", async () => {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≥–∞–º–∞–Ω—Ü—è (MetaMask –∞–±–æ —ñ–Ω—à–æ–≥–æ)
    if (!window.ethereum) {
      document.getElementById("status").innerText =
        "‚ö†Ô∏è –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å MetaMask –∞–±–æ —ñ–Ω—à–∏–π Web3-–≥–∞–º–∞–Ω–µ—Ü—å.";
      return;
    }

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≥–∞–º–∞–Ω—Ü—è
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    document.getElementById("status").innerText =
      "üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≥–∞–º–∞–Ω—Ü—è...";
    await provider.send("eth_requestAccounts", []);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ä–µ–∂—ñ (Base Mainnet, chainId: 8453)
    const network = await provider.getNetwork();
    if (network.chainId !== 8453) {
      document.getElementById("status").innerText =
        "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ –º–µ—Ä–µ–∂—ñ Base Mainnet.";
      return;
    }

    const signer = provider.getSigner();
    const walletAddress = await signer.getAddress();
    document.getElementById(
      "status"
    ).innerText = `üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ NFT –¥–ª—è –∞–¥—Ä–µ—Å–∏ ${walletAddress}...`;

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    const contract = new ethers.Contract(contractAddress, abi, provider);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö tokenId
    const tokenIds = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; // –°–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö tokenId
    const accounts = Array(tokenIds.length).fill(walletAddress);
    const balances = await contract.balanceOfBatch(accounts, tokenIds);

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log("Token IDs:", tokenIds);
    console.log(
      "Balances:",
      balances.map((b) => b.toNumber())
    );

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω —ñ–∑ –Ω–µ–Ω—É–ª—å–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º
    const hasNFT = balances.some((balance) => balance.toNumber() > 0);

    if (hasNFT) {
      document.getElementById("status").innerText =
        "‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ...";
      setTimeout(() => (window.location.href = redirectUrl), 2000);
    } else {
      document.getElementById("status").innerText =
        "‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ NFT. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤—ñ–π –≥–∞–º–∞–Ω–µ—Ü—å.";
    }
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞:", err);
    document.getElementById("status").innerText = `‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: ${
      err.message || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑‚Äô—î–¥–Ω–∞–Ω–Ω—ñ –∑ –≥–∞–º–∞–Ω—Ü–µ–º."
    }`;
  }
});
